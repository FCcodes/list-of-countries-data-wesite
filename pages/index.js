import Head from "next/head";
import Image from "next/image";

//react
import { useState, useEffect } from "react";

//components
import Country from "../components/country";

//material-ui
import {
  Box,
  Grid,
  Typography,
  Input,
  InputAdornment,
  InputLabel,
  FormControl,
  Select,
  MenuItem,
  Pagination,
} from "@mui/material";

export default function Home({ country }) {
  const [filter, setFilter] = useState("none");
  const [page, setPage] = useState(1);
  const [pagination, setPagination] = useState([]);
  const [currentPage, setCurrentPage] = useState([]);
  let numberOfPages = Math.ceil(country.length / 8)
  console.log(pagination, pagination.length);

  /* this function paginates the countrys array, breaking 
  up the country's arrry into smaller arrays with lengths 
  of 8.
  */

  function createPaginatedArray(array) {
    console.log(numberOfPages)
    let paginatedArray = [];
    //paginatedArray.push(country.slice(-2))

    for (let i = 0; i < numberOfPages; i++) {
      let sub = i === 0 ? 0 : 1;
      paginatedArray.push(array.slice(i * 8 - sub, 8 + i * 8 - sub));
    }

    return paginatedArray;
  }

  useEffect(() => {
    if (pagination.length > 0) {
      let api = "";

      switch (filter) {
        case "none":
          api = "https://restcountries.com/v3.1/all";
          break;
        case "america":
          api = "https://restcountries.com/v3.1/region/america";
          break;
        case "africa":
          api = "https://restcountries.com/v3.1/region/africa";
          break;
        case "asia":
          api = "https://restcountries.com/v3.1/region/asia";
          break;
        case "europe":
          api = "https://restcountries.com/v3.1/region/europe";
          break;
        case "oceania":
          api = "https://restcountries.com/v3.1/region/oceania";
          break;
        default:
          api = "";
          break;
      }

      if (pagination.length > 0) {
        fetch(api)
          .then((res) => res.json())
          .then(async(data) => {            
            numberOfPages = Math.ceil(data.length / 8)
            console.log(numberOfPages)     
            let array = createPaginatedArray(data);            
            setPagination(array)        //               
          })          
          .catch((error) => console.log(error));
      }

      return;
    }
    return;
  }, [filter]);

  useEffect(() => {
    let array = createPaginatedArray(country);
    setPagination(array);
    // (async function(){
    //   setCurrentPage(pageination[0])
    // })()
    return;
  }, []);

  useEffect(() => {
    if (pagination.length > 0) {
      console.log(pagination.length);
      setCurrentPage(pagination[parseInt(page)]);

      return;
    }

    return;
  }, [page, pagination]);

  return (
    <>
      <Head>
        <title>Global</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box component="div">
        <Box component="main" sx={{ px: 7, py: 5 }}>
          <Grid
            container
            component="section"
            className="search-section"
            sx={{
              mb: 10,
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              width: "100%",
            }}
          >
            <FormControl sx={{ width: { phone: "30%" } }}>
              <Input
                value=""
                disableUnderline={true}
                error={false}
                fullWidth={true}
                sx={{
                  px: 3,
                  py: 0.8,
                  borderRadius: "5px",
                  border: '1px solid black',
                }}
                inputProps={{
                  placeholder: "Search for a country",
                }}
                // startAdornment={
                //   <InputAdornment>
                //     <Image src="" alt="" />
                //   </InputAdornment>
                // }
              />
            </FormControl>

            <FormControl sx={{ width: "25%" }}>
              <InputLabel id="select-region">Filter by Region</InputLabel>
              <Select
                labelId="select-region"
                id="select-region"
                value={filter}
                fullWidth                
                label="Filter by Region"
                onChange={(e) => {
                  setFilter(e.target.value);
                  return;
                }}
              >
                <MenuItem value="none">None</MenuItem>
                <MenuItem value="africa">Africa</MenuItem>
                <MenuItem value="america">America</MenuItem>
                <MenuItem value="asia">Asia</MenuItem>
                <MenuItem value="europe">Europe</MenuItem>
                <MenuItem value="oceania">Oceania</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid container>
            <Grid item container phone={12}>
              {currentPage.map((country, index) => {
                return (
                  <Country
                    key={Math.ceil(Math.random() * 1000000) * index}
                    image={country.flags.svg}
                    country={country.name}
                    population={country.population}
                    region={country.region}
                    capital={country.capital}
                  />
                );
              })}
            </Grid>
            <Pagination
              count={numberOfPages - 1}
              page={page}
              onChange={(e, value) => setPage(value)}
              sx={{ mt: 5, mx: "auto" }}
            />
          </Grid>
        </Box>
      </Box>
    </>
  );
}

export async function getStaticProps() {
  let country = null;
  let api = "https://restcountries.com/v3.1/all";

  try {
    let res = await fetch(api);
    let data = await res.json();
    country = data;
  } catch (err) {
    console.log(err);
  }

  return {
    props: {
      country,
    },
  };
}
